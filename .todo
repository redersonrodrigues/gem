# PRÉ-REQUISITOS INDISPENSÁVEIS DA APLICAÇÃO
- Aplicação em Python, orientada a objeto, Desktop
- Estrutura MVC com uso de Components, Templates e Módulo Administrativo para a aplicação
- Ambiente Virtual venv de desenvolvimento Python
- SQLite para banco de dados, com nome de gem.db
- Uso obrigatório de design patterns e boas práticas de programação para o desenvolvimento do software
- Uso obrigatório de boas práticas na criação de código SQL
- Uso obrigatório de Gatilhos, Views e scripts para facilitar e otimizar a aplicação
- Obrigatoriamente o layout da aplicação deve ser responsivo para todos os tamanhos de tela, inclusive celulares
- Utilize ícones FontAwesome
- Controle de versão obrigatório no GitHub
- Obrigatório testes gradativos da aplicação (unit e integration) com pytest em tudo que formos implementando e salvando estas implementações no GitHub bem descritas
- Obrigatoriamente atualize o requirements.txt sempre que tiver necessidade de implementar algo no programa

# TODO - Checklist de Tarefas do Projeto GEM (Reorganizado por Prioridade e Dependência)

## 1. Configuração Inicial
- [ ] Criar ambiente virtual Python (.venv) e ativar
- [ ] Gerar e revisar o arquivo requirements.txt com todas as dependências
- [ ] Configurar o arquivo .gitignore para ignorar arquivos/pastas sensíveis e desnecessários
- [ ] Estruturar o projeto em pastas: app/, static/, templates/, tests/, docs/
- [ ] Revisar a estrutura completa do projeto para garantir que todos os arquivos e pastas estão organizados e documentados adequadamente.

## 2. Banco de Dados e Modelagem
- [x] Criar database.py com configuração do SQLite e SQLAlchemy
- [x] Implementar modelos: Hospital, Medico, Especializacao, Escala, Log, User
- [x] Definir e normalizar relacionamentos (incluindo muitos-para-muitos para médicos e especializações)
- [x] Garantir nomes únicos para médicos e especializações em maiúsculas
- [x] Popular especializações iniciais via script
- [x] Implementar e validar CRUD completo para Médicos (com testes)
- [x] Implementar e validar CRUD completo para Especializações (com testes)
- [ ] Ajustar templates e componentes para Especializações, incluindo botões e tabelas
- [ ] Validar funcionalidades de Cadastrar, Voltar, Editar e Excluir para Especializações
- [ ] Implementar e validar CRUD completo para Escalas (plantonistas, sobreaviso ortopedia, sobreaviso demais especialidades) (com testes)
  - [ ] Implementar lógica para escalas de plantonistas com dois turnos (diurno e noturno), permitindo dois médicos distintos por turno.
  - [ ] Implementar lógica para escalas de sobreaviso:
    - [ ] Especialidades clínicas (médica, cirúrgica, pediatria, anestesista, G.O.): escalas semanais com data de início e fim, podendo atravessar meses.
    - [ ] Especialidade ortopedia: escalas quinzenais divididas em duas semanas por quinzena, sem ultrapassar o último dia do mês.
- [ ] Otimizar consultas SQL para eficiência no SQLite (índices, chaves estrangeiras, queries otimizadas, views SQL se necessário)
- [ ] Implementar validação para evitar registros duplicados na mesma data para escalas de plantonistas.
- [ ] Implementar validação para evitar médicos com nomes iguais no mesmo turno (diurno ou noturno) ao registrar uma nova escala de plantonistas.
- [ ] Implementar validação para evitar médicos com nomes iguais no mesmo turno (diurno ou noturno) ao editar uma escala de plantonistas.
- [ ] Implementar rollback e testes de rollback para operações críticas
- [ ] Implementar log de alterações (data, usuário, ação) em todas as entidades (com testes)
- [ ] Garantir operações atômicas e tratamento de exceções em todas as operações CRUD

## 3. Backend e Lógica de Negócio
- [ ] Implementar regras de negócio para escalas (turnos, regimes, validações, restrições de datas para usuários comuns)
- [ ] Implementar controle de permissões: admin (acesso total), usuário comum (restrito a escalas até o dia 15 do mês seguinte)
- [ ] Implementar autenticação e sessão de usuários

## 4. Interface Gráfica Desktop com PyQt5
### 4.1. Tarefas Prioritárias
- [ ] Implementar modo claro/escuro (prioridade alta)
- [ ] Usar sistema de Componentes na aplicação para uso nos Templates (prioridade alta)
- [ ] Usar ícones FontAwesome (prioridade alta)
- [ ] Integrar interface gráfica (PyQt5) com backend Flask (prioridade alta)
- [ ] Garantir um sistema para impressão das escalas personalizadas (prioridade média)
- [ ] Utilizar ReportLab para gerar PDFs personalizados (prioridade média)
- [ ] Utilizar PyPDF2 para manipulação de PDFs, incluindo mesclagem e extração de páginas (prioridade média)

### 4.2. Tarefas Concluídas
- [ ] Criar templates base e componentes reutilizáveis (navbar, footer)
- [ ] Implementar telas: ambiente administrativo, Tela inicial da Aplicação, Tela de Gestão de médicos, Tela de Gestão de Especialidades, Tela de Gestão de Escalas de Plantonistas, Tela de Gestão de Escalas de Sobreaviso, Relatórios de: Médicos, Especialidades, Plantonistas, Sobreaviso, etc
- [ ] Implementar tela de login e controle de sessão
- [ ] Garantir layout responsivo e centralizado

## 5. Testes e Validação
### 5.1. Tarefas Prioritárias
- [ ] Implementar testes de rollback e exceções (prioridade alta)
- [ ] Implementar testes de integração (Pytest) (prioridade alta)
- [ ] Realizar testes no ambiente do hospital (prioridade alta)

### 5.2. Tarefas Concluídas
- [ ] Implementar testes unitários para modelos e scripts de popularização
- [ ] Implementar testes para rotas e operações CRUD de todas as entidades
- [ ] Implementar testes para autenticação, permissões e logs

## 6. Documentação
### 6.1. Tarefas Prioritárias
- [ ] Documentar código e relacionamentos entre classes (docstrings) (prioridade alta)
- [ ] Adicionar diagramas UML para ilustrar relacionamentos entre classes e padrões de design (prioridade média)

### 6.2. Tarefas Concluídas
- [ ] Gerar documentação técnica com Sphinx
- [ ] Documentar fluxos de uso e requisitos

## 7. Segurança e Governança
- [ ] Proteger contra SQL Injection, XSS, CSRF, etc (prioridade alta)
- [ ] Garantir senhas seguras e hash no banco (prioridade alta)
- [ ] Implementar autenticação em dois fatores (2FA) para administradores (prioridade média)

## 8. Melhorias e Ajustes Pendentes
- [ ] Ajustar escala de sobreaviso conforme regras de negócio da aplicação (prioridade média)
- [ ] Revisar validações da aplicação conforme o tipo de usuário (prioridade média)
- [ ] Ocultar do layout do usuário comum aquilo que ele não pode usar (prioridade média)

## 9. Integração e Futuro
- [ ] Planejar integração futura com sistemas hospitalares, prontuário eletrônico ou APIs externas (prioridade baixa)
- [ ] Configurar pipelines de integração contínua e entrega contínua (CI/CD) (prioridade baixa)

## 10. Performance e Escalabilidade
- [ ] Planejar e testar o sistema para uso simultâneo por múltiplos usuários (prioridade média)
- [ ] Implementar cache para reduzir o tempo de resposta em consultas frequentes (prioridade média)

## 11. Usabilidade e Acessibilidade
- [ ] Garantir acessibilidade para pessoas com deficiência (WCAG), incluindo navegação por teclado e leitores de tela (prioridade média)
- [ ] Realizar sessões de teste com usuários reais (médicos, administrativos) e coletar feedback (prioridade média)
